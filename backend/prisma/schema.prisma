generator client {
  provider      = "prisma-client-py"
  interface     = "asyncio"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PRISMA_URL") // uses connection pooling
}

model Image {
  id        Int    @id @default(autoincrement())
  name      String
  image_url String
}

model User {
  id            Int             @id @default(autoincrement())
  token         String
  type          AccountType
  name          String?
  email         String?         @unique
  password      String?
  interactions  Interaction[]
  courses       Course[]
  CourseStudent CourseStudent[]
  books         Book[]
  chats         Chat[]
}

enum AccountType {
  TEACHER
  STUDENT
}

enum InteractionType {
  QUESTION
  NEXT_PAGE
  HELP_ME
  PREV_PAGE
}

enum BookCategory {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  UNPLUGGED
}

model Interaction {
  id              Int             @id @default(autoincrement())
  user            User?           @relation(fields: [userId], references: [id])
  userId          Int?
  interactionType InteractionType
  answer          String?
  correct         Boolean?
  date            DateTime
  timeSinceLoad   Int
  bookId          Int?
  pageId          Int?
  thumbsUp        Boolean?

  question   Question? @relation(fields: [questionId], references: [id])
  questionId Int?

  @@map("QuestionAttempt")
}

model Question {
  id               Int           @id @default(autoincrement())
  question         String
  answer           String
  options          String[]
  questionAttempts Interaction[]
  page             Page          @relation(fields: [pageId], references: [id])
  pageId           Int
}

model Book {
  id              Int          @id @default(autoincrement())
  bookCover       String?
  coverImage      String?
  title           String
  blurb           String?
  readyForPublish Boolean      @default(false)
  published       Boolean      @default(false)
  author          String
  tags            String[]     @default([])
  bookTopic       String?
  category        BookCategory // or String if you prefer
  pages           Page[]
  courses         BookCourse[]
  owner           User         @relation(fields: [ownerId], references: [id])
  ownerId         Int          @default(1)
}

model Page {
  id         Int        @id @default(autoincrement())
  pageNumber Int
  content    Json // or String[]
  image      String
  props      Json? // for storing additional interactive properties
  book       Book       @relation(fields: [bookId], references: [id])
  bookId     Int
  questions  Question[]
}

model CourseStudent {
  id Int @id @default(autoincrement())

  course    Course @relation(fields: [courseId], references: [id])
  courseId  Int
  student   User   @relation(fields: [studentId], references: [id])
  studentId Int
}

model Course {
  id    Int    @id @default(autoincrement())
  title String

  teacher   User            @relation(fields: [teacherId], references: [id])
  teacherId Int
  students  CourseStudent[]
  books     BookCourse[]
}

model BookCourse {
  id Int @id @default(autoincrement())

  book     Book   @relation(fields: [bookId], references: [id])
  bookId   Int
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int
}

model Chat {
  id        String   @id @default(uuid()) @db.Uuid // Ensuring it's UUID
  userId    Int
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  messages  Message[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  chatId    String   @db.Uuid // Ensure the type matches Chat.id
  sender    String
  content   String
  createdAt DateTime @default(now())
  chat      Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
}
